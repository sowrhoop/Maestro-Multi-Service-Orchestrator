name: Build and Publish Maestro

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      slot_a_repo:
        description: Git URL for legacy slot A (optional)
        required: false
      slot_a_ref:
        description: Git ref for slot A (branch/tag/sha)
        default: main
        required: false
      slot_a_subdir:
        description: Optional subdirectory within slot A repo
        required: false
      slot_a_install_cmd:
        description: Optional custom install command for slot A
        required: false
      slot_b_repo:
        description: Git URL for legacy slot B (optional)
        required: false
      slot_b_ref:
        description: Git ref for slot B (branch/tag/sha)
        default: main
        required: false
      slot_b_subdir:
        description: Optional subdirectory within slot B repo
        required: false
      slot_b_install_cmd:
        description: Optional custom install command for slot B
        required: false
      image_suffix:
        description: Optional suffix appended to the image name
        required: false
      platforms:
        description: Optional comma-separated platform list (default linux/amd64)
        required: false

concurrency:
  group: maestro-build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      REGISTRY: docker.io
      DEFAULT_IMAGE_NAME: maestro-orchestrator
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute namespace and image name
        id: vars
        env:
          VAR_NAMESPACE: ${{ vars.DOCKERHUB_NAMESPACE || '' }}
          SECRET_NAMESPACE: ${{ secrets.DOCKERHUB_NAMESPACE || '' }}
          SECRET_USERNAME: ${{ secrets.DOCKERHUB_USERNAME || '' }}
          INPUT_SUFFIX: ${{ github.event.inputs.image_suffix || '' }}
        run: |
          set -euo pipefail
          namespace="${VAR_NAMESPACE:-${SECRET_NAMESPACE:-${SECRET_USERNAME:-${GITHUB_REPOSITORY_OWNER}}}}"
          namespace="${namespace,,}"
          image_name="${DEFAULT_IMAGE_NAME}"
          if [ -n "${INPUT_SUFFIX}" ]; then
            image_name="${image_name}-${INPUT_SUFFIX}"
          fi
          echo "namespace=${namespace}" >> "$GITHUB_OUTPUT"
          echo "image_name=${image_name}" >> "$GITHUB_OUTPUT"

      - name: Resolve build arguments
        id: slots
        env:
          VAR_SLOT_A_REPO: ${{ vars.SLOT_A_REPO || '' }}
          VAR_SLOT_A_REF: ${{ vars.SLOT_A_REF || 'main' }}
          VAR_SLOT_A_SUBDIR: ${{ vars.SLOT_A_SUBDIR || '' }}
          VAR_SLOT_A_INSTALL: ${{ vars.SLOT_A_INSTALL_CMD || '' }}
          VAR_SLOT_B_REPO: ${{ vars.SLOT_B_REPO || '' }}
          VAR_SLOT_B_REF: ${{ vars.SLOT_B_REF || 'main' }}
          VAR_SLOT_B_SUBDIR: ${{ vars.SLOT_B_SUBDIR || '' }}
          VAR_SLOT_B_INSTALL: ${{ vars.SLOT_B_INSTALL_CMD || '' }}
          INPUT_SLOT_A_REPO: ${{ github.event.inputs.slot_a_repo || '' }}
          INPUT_SLOT_A_REF: ${{ github.event.inputs.slot_a_ref || '' }}
          INPUT_SLOT_A_SUBDIR: ${{ github.event.inputs.slot_a_subdir || '' }}
          INPUT_SLOT_A_INSTALL: ${{ github.event.inputs.slot_a_install_cmd || '' }}
          INPUT_SLOT_B_REPO: ${{ github.event.inputs.slot_b_repo || '' }}
          INPUT_SLOT_B_REF: ${{ github.event.inputs.slot_b_ref || '' }}
          INPUT_SLOT_B_SUBDIR: ${{ github.event.inputs.slot_b_subdir || '' }}
          INPUT_SLOT_B_INSTALL: ${{ github.event.inputs.slot_b_install_cmd || '' }}
        run: |
          set -euo pipefail

          slot_a_repo="${INPUT_SLOT_A_REPO:-${VAR_SLOT_A_REPO:-}}"
          slot_a_ref="${INPUT_SLOT_A_REF:-${VAR_SLOT_A_REF:-}}"
          slot_a_subdir="${INPUT_SLOT_A_SUBDIR:-${VAR_SLOT_A_SUBDIR:-}}"
          slot_a_install="${INPUT_SLOT_A_INSTALL:-${VAR_SLOT_A_INSTALL:-}}"

          slot_b_repo="${INPUT_SLOT_B_REPO:-${VAR_SLOT_B_REPO:-}}"
          slot_b_ref="${INPUT_SLOT_B_REF:-${VAR_SLOT_B_REF:-}}"
          slot_b_subdir="${INPUT_SLOT_B_SUBDIR:-${VAR_SLOT_B_SUBDIR:-}}"
          slot_b_install="${INPUT_SLOT_B_INSTALL:-${VAR_SLOT_B_INSTALL:-}}"

          # Only keep refs when a repo has been defined
          if [ -z "$slot_a_repo" ]; then
            slot_a_ref=""
          fi
          if [ -z "$slot_b_repo" ]; then
            slot_b_ref=""
          fi

          {
            echo "slot_a_repo=$slot_a_repo"
            echo "slot_a_ref=$slot_a_ref"
            echo "slot_a_subdir=$slot_a_subdir"
            echo "slot_a_install=$slot_a_install"
            echo "slot_b_repo=$slot_b_repo"
            echo "slot_b_ref=$slot_b_ref"
            echo "slot_b_subdir=$slot_b_subdir"
            echo "slot_b_install=$slot_b_install"
          } >> "$GITHUB_OUTPUT"

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.vars.outputs.namespace }}/${{ steps.vars.outputs.image_name }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha
            type=ref,event=tag
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{major}}.{{minor}},event=tag

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          platforms: ${{ github.event.inputs.platforms || vars.MAESTRO_PLATFORMS || 'linux/amd64' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SERVICE_A_REPO=${{ steps.slots.outputs.slot_a_repo }}
            SERVICE_A_REF=${{ steps.slots.outputs.slot_a_ref }}
            SERVICE_A_SUBDIR=${{ steps.slots.outputs.slot_a_subdir }}
            SERVICE_A_INSTALL_CMD=${{ steps.slots.outputs.slot_a_install }}
            SERVICE_B_REPO=${{ steps.slots.outputs.slot_b_repo }}
            SERVICE_B_REF=${{ steps.slots.outputs.slot_b_ref }}
            SERVICE_B_SUBDIR=${{ steps.slots.outputs.slot_b_subdir }}
            SERVICE_B_INSTALL_CMD=${{ steps.slots.outputs.slot_b_install }}

      - name: Create GitHub Release (on tag)
        if: github.ref_type == 'tag'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
