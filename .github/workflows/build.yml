name: Build and Push Image

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      service_a_repo:
        description: Git URL for Service A (e.g., https://github.com/owner/project-1.git)
        required: true
      service_a_ref:
        description: Git ref for Service A (branch/tag/sha)
        default: main
        required: true
      service_a_subdir:
        description: Optional subdirectory within Service A repo
        required: false
      service_a_install_cmd:
        description: Optional custom install command for Service A
        required: false
      service_b_repo:
        description: Git URL for Service B (e.g., https://github.com/owner/project-2.git)
        required: true
      service_b_ref:
        description: Git ref for Service B (branch/tag/sha)
        default: main
        required: true
      service_b_subdir:
        description: Optional subdirectory within Service B repo
        required: false
      service_b_install_cmd:
        description: Optional custom install command for Service B
        required: false

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: supervisor-image-combination
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT != '' && secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}

      - name: Compute tags
        id: vars
        run: |
          echo "owner_lc=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"
          echo "sha_tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          REF_NAME="${GITHUB_REF_NAME}"
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${REF_NAME}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION="${REF_NAME#v}"
            MAJOR_MINOR=$(echo "$VERSION" | cut -d. -f1-2)
            echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
            echo "version_mm=${MAJOR_MINOR}" >> "$GITHUB_OUTPUT"
          fi

      - name: Resolve build args (with defaults)
        id: args
        shell: bash
        env:
          IN_SA_REPO: ${{ inputs.service_a_repo }}
          IN_SA_REF: ${{ inputs.service_a_ref }}
          IN_SA_SUBDIR: ${{ inputs.service_a_subdir }}
          IN_SA_INSTALL: ${{ inputs.service_a_install_cmd }}
          IN_SB_REPO: ${{ inputs.service_b_repo }}
          IN_SB_REF: ${{ inputs.service_b_ref }}
          IN_SB_SUBDIR: ${{ inputs.service_b_subdir }}
          IN_SB_INSTALL: ${{ inputs.service_b_install_cmd }}
          OWNER: ${{ github.repository_owner }}
        run: |
          # Defaults to owner/project-1 and owner/project-2 when inputs are empty
          SA_REPO=${IN_SA_REPO:-"https://github.com/${OWNER}/project-1.git"}
          SA_REF=${IN_SA_REF:-main}
          SB_REPO=${IN_SB_REPO:-"https://github.com/${OWNER}/project-2.git"}
          SB_REF=${IN_SB_REF:-main}
          echo "service_a_repo=${SA_REPO}" >> "$GITHUB_OUTPUT"
          echo "service_a_ref=${SA_REF}" >> "$GITHUB_OUTPUT"
          echo "service_a_subdir=${IN_SA_SUBDIR}" >> "$GITHUB_OUTPUT"
          echo "service_a_install_cmd=${IN_SA_INSTALL}" >> "$GITHUB_OUTPUT"
          echo "service_b_repo=${SB_REPO}" >> "$GITHUB_OUTPUT"
          echo "service_b_ref=${SB_REF}" >> "$GITHUB_OUTPUT"
          echo "service_b_subdir=${IN_SB_SUBDIR}" >> "$GITHUB_OUTPUT"
          echo "service_b_install_cmd=${IN_SB_INSTALL}" >> "$GITHUB_OUTPUT"

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ steps.vars.outputs.owner_lc }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_tag }}
            ${{ steps.vars.outputs.version != '' && format('ghcr.io/{0}/{1}:{2}', steps.vars.outputs.owner_lc, env.IMAGE_NAME, steps.vars.outputs.version) || '' }}
            ${{ steps.vars.outputs.version_mm != '' && format('ghcr.io/{0}/{1}:{2}', steps.vars.outputs.owner_lc, env.IMAGE_NAME, steps.vars.outputs.version_mm) || '' }}
          build-args: |
            SERVICE_A_REPO=${{ steps.args.outputs.service_a_repo }}
            SERVICE_A_REF=${{ steps.args.outputs.service_a_ref }}
            SERVICE_A_SUBDIR=${{ steps.args.outputs.service_a_subdir }}
            SERVICE_A_INSTALL_CMD=${{ steps.args.outputs.service_a_install_cmd }}
            SERVICE_B_REPO=${{ steps.args.outputs.service_b_repo }}
            SERVICE_B_REF=${{ steps.args.outputs.service_b_ref }}
            SERVICE_B_SUBDIR=${{ steps.args.outputs.service_b_subdir }}
            SERVICE_B_INSTALL_CMD=${{ steps.args.outputs.service_b_install_cmd }}

      - name: Create GitHub Release (on tag)
        if: github.ref_type == 'tag'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
