#!/usr/bin/env bash
# Simple wrapper so teammates can stand up Maestro via Terraform without prior knowledge.

set -euo pipefail

ACTION="${1:-apply}"
case "${ACTION}" in
  apply | plan | destroy) ;;
  *)
    echo "Usage: $0 [apply|plan|destroy]"
    echo "  apply   - builds the image (if needed) and creates/updates the Maestro container"
    echo "  plan    - shows the changes Terraform will make"
    echo "  destroy - stops the container and removes the image created by apply"
    exit 1
    ;;
esac

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TF_DIR="${SCRIPT_DIR}/terraform"
CONFIG_FILE="${TF_DIR}/generated.auto.tfvars"

require_cmd() {
  if ! command -v "$1" >/dev/null 2>&1; then
    echo "Error: '$1' is required but not installed or not on PATH."
    case "$1" in
      terraform)
        echo "Install Terraform from https://developer.hashicorp.com/terraform/downloads"
        ;;
      docker)
        echo "Install Docker Desktop or the Docker Engine (https://docs.docker.com/get-docker/)."
        ;;
    esac
    exit 1
  fi
}

tf_escape() {
  local value="${1}"
  value="${value//\\/\\\\}"
  value="${value//\"/\\\"}"
  printf '%s' "${value}"
}

prompt_default() {
  local prompt="$1"
  local default="$2"
  local __resultvar="$3"
  local input
  read -r -p "${prompt} [${default}]: " input || true
  if [[ -z "${input}" ]]; then
    input="${default}"
  fi
  printf -v "${__resultvar}" '%s' "${input}"
}

prompt_optional() {
  local prompt="$1"
  local __resultvar="$2"
  local input
  read -r -p "${prompt} (leave blank to skip): " input || true
  printf -v "${__resultvar}" '%s' "${input}"
}

create_config_if_needed() {
  if [[ -f "${CONFIG_FILE}" ]]; then
    return
  fi
  if [[ ! -t 0 ]]; then
    echo "Configuration file ${CONFIG_FILE} is missing."
    echo "Run this script interactively once to generate it, or create your own .tfvars file."
    exit 1
  fi

  echo "No Terraform settings found. Let's capture a few basics (press Enter to accept defaults)."

  local container_name preseed_mode services_spec

  prompt_default "Container name" "maestro" container_name
  prompt_default "Autostart mode for preseeded directories (auto|always|never)" "auto" preseed_mode
  echo "Provide a SERVICES specification to auto-provision projects (format: repo|port|ref|name|user|cmd;...). Leave blank to manage services later."
  prompt_optional "SERVICES value" services_spec

  {
    echo "# Generated by provision.sh on $(date)"
    echo "image_name     = \"maestro-orchestrator\""
    echo "image_tag      = \"iac\""
    printf 'container_name = "%s"\n' "$(tf_escape "${container_name}")"
    cat <<EOF
ports = []

container_env = {
  ENTRYPOINT_LOG_LEVEL   = "info"
  MAESTRO_PRESEEDED_MODE = "$(tf_escape "${preseed_mode}")"
}
EOF
    if [[ -n "${services_spec}" ]]; then
      printf '  SERVICES             = "%s"\n' "$(tf_escape "${services_spec}")"
    fi
    echo "}"
  } > "${CONFIG_FILE}"

  echo
  echo "Saved your answers to ${CONFIG_FILE}."
}

require_cmd terraform
require_cmd docker

create_config_if_needed

echo "Running terraform init..."
terraform -chdir="${TF_DIR}" init -input=false
echo "Terraform ready."

echo "Running terraform ${ACTION}..."

case "${ACTION}" in
  plan)
    terraform -chdir="${TF_DIR}" plan -input=false
    ;;
  apply)
    terraform -chdir="${TF_DIR}" apply -auto-approve -input=false
    echo
    echo "Maestro is provisioned. Current outputs:"
    terraform -chdir="${TF_DIR}" output
    echo
    echo "Use './iac/provision.sh destroy' when you are ready to tear everything down."
    ;;
  destroy)
    terraform -chdir="${TF_DIR}" destroy -auto-approve -input=false
    echo "Maestro resources destroyed."
    ;;
esac
